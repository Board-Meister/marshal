// Generated by dts-bundle-generator v9.5.1

export interface EntryConfig {
	source: string | object;
	namespace: string;
	name: string;
	version: string;
	arguments?: unknown[];
}
export interface RegisterConfig {
	entry: EntryConfig;
	type: "scope" | "module";
	scope?: boolean;
	tags?: string[];
	requires?: string[];
	lazy?: boolean;
	asset?: {
		src: string;
	};
	resource?: {
		src: string;
	};
}
export declare class CModule<T = any> {
	constructor(...args: unknown[]);
	inject?: (injections: T) => void;
}
export type Module<T = any> = CModule<T> | Record<string, unknown>;
export interface IModuleImportObject {
	default?: Module | ((...args: unknown[]) => void);
}
export interface IModuleImport {
	config: RegisterConfig;
	module: IModuleImportObject | (() => Promise<Module>);
}
declare class _IInjectable<T = object> {
	constructor(...args: unknown[]);
	inject(injections: T): void;
	scope?(): Record<string, unknown>;
	static inject: Record<string, string>;
}
export type IInjectable<T> = typeof _IInjectable<T>;
declare class Marshal {
	#private;
	static version: string;
	registered: Record<string, RegisterConfig>;
	loaded: Record<string, object>;
	scope: Record<string, unknown>;
	tagMap: Record<string, IModuleImport[]>;
	instanceMap: WeakMap<Module<any>, RegisterConfig>;
	constructor();
	addScope(name: string, value: unknown): void;
	register(config: RegisterConfig): void;
	getModuleConstraint(config: RegisterConfig): string;
	get<Type>(key: string): Type | null;
	load(): Promise<void>;
	getResourceUrl(module: Module, suffix: string): string;
	asset(module: Module, suffix: string): string;
	getMappedInstance(module: Module): RegisterConfig | undefined;
	import(source: string, addScope?: Record<string, unknown>): Promise<IModuleImportObject>;
}

export {
	Marshal as default,
};

export {};
