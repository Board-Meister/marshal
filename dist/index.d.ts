// Generated by dts-bundle-generator v9.5.1

export interface EntryConfig {
	source: string | object;
	namespace: string;
	name: string;
	version: string;
	arguments?: unknown[];
}
export interface RegisterConfig {
	entry: EntryConfig;
	type: "scope" | "module";
	scope?: boolean;
	tags?: string[];
	requires?: string[];
	lazy?: boolean;
	asset?: {
		src: string;
	};
	resource?: {
		src: string;
	};
}
export type Module = Record<string, unknown>;
export interface IModuleImportObject {
	default?: Module | ((...args: unknown[]) => void);
}
export interface IModuleImport {
	config: RegisterConfig;
	module: IModuleImportObject | (() => Promise<Module>);
}
/**
 * Initializer is a kernel class of application, manually called by the app.
 * This is just a helper interface to keep all initializers united
 */
export interface IInitializer {
	init: (global: unknown) => Promise<void>;
}
declare class _IInjectable {
	constructor(...args: unknown[]);
	inject(injections: Record<string, object>): void;
	scope?(): Record<string, unknown>;
	static inject: Record<string, string>;
}
export type IInjectable = typeof _IInjectable;
declare class Marshal {
	static version: string;
	renderCount: number;
	registered: Record<string, RegisterConfig>;
	loaded: Record<string, object>;
	tagMap: Record<string, IModuleImport[]>;
	scope: Record<string, unknown>;
	instanceMap: WeakMap<Module, RegisterConfig>;
	constructor();
	addScope(name: string, value: unknown): void;
	render(): void;
	register(config: RegisterConfig): void;
	getModuleConstraint(config: RegisterConfig): string;
	get<Type>(key: string): Type | null;
	load(): Promise<void>;
	loadScopes(): Promise<Record<string, RegisterConfig>>;
	updateTagModules(): void;
	tagModules(moduleImport: IModuleImport): void;
	instantiateModule(moduleImport: IModuleImport): Module;
	mapInstance(config: RegisterConfig, module: Module): void;
	getMappedInstance(module: Module): RegisterConfig | undefined;
	loadDependencies(module: Module, config: RegisterConfig): Record<string, object> | undefined | false;
	isESClass(fn: unknown): boolean;
	orderModules(moduleRegistry: Record<string, RegisterConfig>): RegisterConfig[];
	generateLoadGroups(toSend: Record<string, RegisterConfig>): Promise<IModuleImport>[];
	isTag(string: string): boolean;
	import(source: string, addScope?: Record<string, unknown>): Promise<IModuleImportObject>;
	importModule(config: RegisterConfig): Promise<IModuleImportObject>;
	retrieveModulePromise(config: RegisterConfig): Promise<IModuleImport>;
	isObjectEmpty(obj: object): boolean;
}

export {
	Marshal as default,
};

export {};
